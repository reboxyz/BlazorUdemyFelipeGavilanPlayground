
<nav aria-label="Page Navigation">
    <ul class="pagination justify-content-center">
        @foreach (var link in links)
        {
            <li @onclick="@(() => SelectedPageInternal(link))"
                style="cursor: pointer"
                class="page-item @(link.Enabled ? null: "disabled") @(link.Active ? "active" : null)"
            >    
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter] public int CurrentPage { get; set; }  = 1;
    [Parameter] public int TotalAmountPages { get; set; }

    // Since we will be displaying an offset of 1 relative to the current Page; Ex: If current Page is 3, then it is 1,2, and 3.
    // Another Ex: If current Page is 5, then it is 4,5, and 6
    [Parameter] public int Radius { get; set; } = 3;  
    [Parameter] public EventCallback<int> SelectedPage { get; set;}
    
    private List<LinkModel> links;

    protected override void OnParametersSet()
    {
        LoadPages();
        base.OnParametersSet();
    }

    private void LoadPages()
    {
        links = new List<LinkModel>();

        // Setup Previous link
        var isPreviousPageLinkEnabled = CurrentPage != 1;
        var previousPage = CurrentPage - 1;
        links.Add(new LinkModel(previousPage, isPreviousPageLinkEnabled, "Previous"));

        // Setup Radius Range Links
        for (int i = 1; i <= TotalAmountPages; i++)
        {
            if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
            {
                links.Add(new LinkModel(i) { Active = CurrentPage == i });
            }
        }

        // Setup Next Link
        var isNextPageLinkEnabled = CurrentPage != TotalAmountPages;
        var nextPage = CurrentPage + 1;
        links.Add( new LinkModel(nextPage, isNextPageLinkEnabled, "Next"));
    }

    private async Task SelectedPageInternal(LinkModel link)
    {
        if (link.Page == CurrentPage)
        {
            return;
        }

        if (!link.Enabled)
        {
            return;
        }

        CurrentPage = link.Page;  // Update the current page
        await SelectedPage.InvokeAsync(link.Page);
    }


    // Note! Class representing the Link in the Pagination
    class LinkModel {
        public LinkModel(int page): this(page, true)
        {}

        public LinkModel(int page, bool enabled): this(page, enabled, page.ToString())
        {}

        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public string Text { get; set; }   // Note! Prev, Next, 1,2,...
        public int Page { get; set; }      // Page Number
        public bool Enabled { get; set; } = true;   // Is Link enabled?
        public bool Active { get; set; } = false;   // Is Link current Page?
    }
    
}   