@inject IJSRuntime JSRuntime


<h3>Movies List</h3>
<input type="checkbox" @bind="displayButtons" />
<br/>
<GenericList List="Movies">
    <ElementTemplate Context="movie">
        <IndividualMovie 
            Movie="movie" 
            DisplayButtons="displayButtons" 
            DeleteMovie="DeleteMovie"
        />
    </ElementTemplate>
    <NullContent>
         <text>Loading...</text>
    </NullContent>
    <EmptyContent>
         <text>There are no records to display</text>
    </EmptyContent>
</GenericList>

<Confirmation 
    @ref="confirmation"
    onCancel="onCancel"
    onConfirm= "onConfirm"
>
    <div>Do you wish to delete '@MovieToBeDeleted.Title'?</div>
</Confirmation>   

@code {
    Confirmation confirmation;

    [Parameter] public List<Movie> Movies { get; set; } 
    
    bool displayButtons = true;
    Movie MovieToBeDeleted;

    private void onConfirm()
    {
        Movies.Remove(MovieToBeDeleted);
        confirmation.Hide();
        MovieToBeDeleted = null;
    }

    private void onCancel()
    {
        confirmation.Hide();
        MovieToBeDeleted = null;
    }

    private async Task DeleteMovie(Movie movie)
    {
        MovieToBeDeleted = movie;
        confirmation.Show();
        
        await JSRuntime.MyFunction("Calling DeleteMovie");
        /*
        // Note! Execute JS window.confirm method using BlazorMovies.Client.Helpers.IJSRuntimeExtensionMethods 
        var confirmed = await JSRuntime.Confirm($"Are you sure you want to delete {movie.Title}?");

        if (confirmed)
        {
            Movies.Remove(movie);
        }
        */
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized. Movies.Count = " + Movies.Count.ToString());
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParametersSet. Movies.Count = " + Movies.Count.ToString());
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("OnAfterRender. firstRender = " + firstRender);
    }

    protected override bool ShouldRender()
    {
        return true;
    }
}     