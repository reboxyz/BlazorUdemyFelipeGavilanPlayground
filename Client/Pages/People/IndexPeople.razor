@page "/people"
@inject IPersonRepository PersonRepository
@attribute [Authorize]

<h3>People Index</h3>

<div clas="form-group">
    <a class="btn btn-info" href="person/create">New Person</a>
</div>
<br/>
<Pagination CurrentPage="@paginationDTO.Page" TotalAmountPages="totalAmountPages" SelectedPage="SelectedPage" />
<br/>

<GenericList List="People">
    <WholeListTemplate>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in People)
                {
                    <tr>
                        <td>
                            <a class="btn btn-success" href="/person/edit/@item.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="(() => DeletePerson(item.Id))">Delete</button>
                        </td>
                        <td>@item.Name</td>
                    </tr>   
                }
            </tbody>
        </table>
    </WholeListTemplate>
</GenericList>


@code {
    List<Person> People = new List<Person>();
    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 1 };
    private int totalAmountPages;

    protected override async Task OnInitializedAsync()
    {
        try {   
            await LoadPeople();
        }catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task LoadPeople()
    {
        var paginatedResponse = await PersonRepository.GetPeople(paginationDTO);
        People = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages; 
    }

    private async Task DeletePerson(int id)
    {
        await PersonRepository.DeletePerson(id);
        await LoadPeople();
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;  // Update page number
        await LoadPeople();
    }
}