@page "/users/edit/{userId}"
@inject IUsersRepository UsersRepository
@inject IDisplayMessage DisplayMessage
@attribute [Authorize(Roles = "Admin")]

<h3>Edit User</h3>

<div class="form-inline">
    <select class="form-control mb-2 mr-sm-2" @bind="selectedRole">
        <option value="0">--Select a role--</option>
        @foreach (var role in roles)
        {
            <option value="@role.RoleName">@role.RoleName</option>
        }
    </select>
    <button class="btn btn-info mb-2 mr-sm-2" @onclick="AssignRole">Assign</button>
    <button class="btn btn-danger mb-2 mr-sm-2" @onclick="RemoveRole">Remove</button>
</div>

@code {
    [Parameter] public string UserId { get; set; }

    private List<RoleDTO> roles = new List<RoleDTO>();
    private string selectedRole = "0";

    protected override async Task OnInitializedAsync()
    {
        roles = await UsersRepository.GetRoles();
    }

    private async Task AssignRole()
    {
        if (selectedRole == "0")
        {
            await DisplayMessage.DisplayErrorMessage("You must select a role.");
            return; 
        }

        var editRole = new EditRoleDTO()
        {
            UserId = UserId,
            RoleName = selectedRole
        };

        await UsersRepository.AssignRole(editRole);
        await DisplayMessage.DisplayInfoMessage("Role assigned.");
    }

    private async Task RemoveRole()
    {
        if (selectedRole == "0")
        {
            await DisplayMessage.DisplayErrorMessage("You must select a role.");
            return; 
        }

        var editRole = new EditRoleDTO()
        {
            UserId = UserId,
            RoleName = selectedRole
        };

        await UsersRepository.RemoveRole(editRole);
        await DisplayMessage.DisplayInfoMessage("Role removed.");
    }
}