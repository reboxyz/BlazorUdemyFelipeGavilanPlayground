@page "/movies/search"
@inject IMoviesRepository MoviesRepository
@inject IGenreRepository GenreRepository
@inject NavigationManager NavigationManager

<h3>Search Movies</h3>
<EditForm Model="filterMoviesDTO">

    <div class="form-inline">
        <div class="form-group mx-sm-3 mb-2">
            <select class="form-control" @bind="filterMoviesDTO.GenreId">
                    <option value="0">--Select a Genre--</option>
                    @foreach(var genre in genres)
                    {
                        <option value="@genre.Id">@genre.Name</option>
                    }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="title" class="sr-only">Title</label>
            <input 
                type="text" 
                class="form-control" 
                id="title" 
                placeholder="Movie Title" 
                @bind-value="filterMoviesDTO.Title" 
                @bind-value:event="oninput"
                @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))"
            />
        </div>
        <div class="form-group mx-sm-3 mb-2">
            <input 
                type="checkbox" 
                class="form-check-input" 
                id="upcomingReleases"
                @bind="filterMoviesDTO.UpcomingReleases"
            />
            <label class="form-check-label" for="upcomingReleases">Upcoming Releases</label>
        </div>
        <div class="form-group mx-sm-3 mb-2">
            <input 
                type="checkbox" 
                class="form-check-input" 
                id="inTheaters"
                @bind="filterMoviesDTO.InTheaters"
            />
            <label class="form-check-label" for="inTheaters">In Theaters</label>
        </div>
        <button type="button" class="btn btn-primary mb-2 mx-sm-3" @onclick="SearchMovies">Search</button>
        <button type="button" class="btn btn-danger mb-2" @onclick="Clear">Clear</button>
    </div>

</EditForm>

<MoviesList Movies="movies"></MoviesList>

<Pagination
    CurrentPage="filterMoviesDTO.Page"
    TotalAmountPages="totalAmountPages"
    SelectedPage="SelectedPage"
>

</Pagination>

@code {
   
    private List<Genre> genres = new List<Genre>();
    private List<Movie> movies = new List<Movie>();   
    private FilterMoviesDTO filterMoviesDTO = new FilterMoviesDTO() { RecordsPerPage = 1};  // Test only
    private int totalAmountPages = 0;

    private async Task TitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchMovies();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        genres = await GenreRepository.GetGenres();

        // Apply Filters if there are any set in the Query String
        var dicQueryStrings = NavigationManager.GetQueryStrings(NavigationManager.Uri);

        if (dicQueryStrings != null)
        {
            FillFilterWithQueryStrings(dicQueryStrings);
        }

        await LoadMovies();    
    }

    private void FillFilterWithQueryStrings(Dictionary<string, string> dicQueryStrings)
    {
        if (dicQueryStrings.ContainsKey("genreId"))
        {
            filterMoviesDTO.GenreId = int.Parse(dicQueryStrings["genreId"]);
        }

        if (dicQueryStrings.ContainsKey("title"))
        {
            filterMoviesDTO.Title = dicQueryStrings["title"];
        }

        if (dicQueryStrings.ContainsKey("inTheaters"))
        {
            filterMoviesDTO.InTheaters = bool.Parse(dicQueryStrings["inTheaters"]);
        }

        if (dicQueryStrings.ContainsKey("upcomingReleases"))
        {
            filterMoviesDTO.UpcomingReleases = bool.Parse(dicQueryStrings["upcomingReleases"]);
        }

        if (dicQueryStrings.ContainsKey("page"))
        {
            filterMoviesDTO.Page = int.Parse(dicQueryStrings["page"]);
        }
        
    }

    private async Task LoadMovies()
    {
        var queryString = GenerateQueryString();
        if (!string.IsNullOrWhiteSpace(queryString))
        {
            queryString = $"?{queryString}";
            NavigationManager.NavigateTo("movies/search" + queryString);
        }
        var paginatedResponse = await MoviesRepository.GetMoviesFiltered(filterMoviesDTO);
        movies = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    // Not! Useful in Bookmarking, we need to generate the Query String for the Address Bar
    private string GenerateQueryString()
    {
        var queryStringsDict = new Dictionary<string, string>();
        queryStringsDict["genreId"] = filterMoviesDTO.GenreId.ToString();
        queryStringsDict["title"] = filterMoviesDTO.Title ?? "";
        queryStringsDict["inTheaters"] = filterMoviesDTO.InTheaters.ToString();
        queryStringsDict["upcomingReleases"] = filterMoviesDTO.UpcomingReleases.ToString();
        queryStringsDict["page"] = filterMoviesDTO.Page.ToString();
        
        var defaultValues = new List<string>() {"false", "", "0"};

        var queryStringsArray = queryStringsDict
            .Where(x => !defaultValues.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray();

        return string.Join("&", queryStringsArray);
    }

    private async Task SearchMovies()
    {
       await LoadMovies();
    }
    
    private async Task Clear()
    {
       filterMoviesDTO.Title = "";
       filterMoviesDTO.GenreId = 0;
       filterMoviesDTO.UpcomingReleases = false;
       filterMoviesDTO.InTheaters = false;
       await LoadMovies();
    }
    
    private async Task SelectedPage(int page)
    {
        filterMoviesDTO.Page = page;
        await LoadMovies();
    }
}

    