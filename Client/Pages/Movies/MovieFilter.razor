@page "/movies/search"
@inject IRepository MovieRepository

<h3>Search Movies</h3>

<div class="form-inline">
    <div class="form-group mx-sm-3 mb-2">
        <select class="form-control" @bind="selectedGenre">
                <option value="0">--Select a Genre--</option>
                @foreach(var genre in genres)
                {
                    <option value="@genre.Id">@genre.Name</option>
                }
        </select>
    </div>
    <div class="form-group mb-2">
        <label for="title" class="sr-only">Title</label>
        <input 
            type="text" 
            class="form-control" 
            id="title" 
            placeholder="Movie Title" 
            @bind-value="title" 
            @bind-value:event="oninput"
            @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))"
        />
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input 
            type="checkbox" 
            class="form-check-input" 
            id="upcomingReleases"
            @bind="upcomingReleases"
        />
        <label class="form-check-label" for="upcomingReleases">Upcoming Releases</label>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input 
            type="checkbox" 
            class="form-check-input" 
            id="inTheaters"
            @bind="inTheaters"
        />
        <label class="form-check-label" for="inTheaters">In Theaters</label>
    </div>
    <button type="button" class="btn btn-primary mb-2 mx-sm-3" @onclick="SearchMovies">Search</button>
    <button type="button" class="btn btn-danger mb-2" @onclick="Clear">Clear</button>
</div>

<MoviesList Movies="movies"></MoviesList>

@code {
    private string title="";
    private string selectedGenre = "0";
    private bool upcomingReleases = false;
    private bool inTheaters = false;
    private List<Genre> genres = new List<Genre>();
    private List<Movie> movies = new List<Movie>();   

    private void TitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchMovies();
        }
    }

    protected override void OnInitialized()
    {
        // Todo: Retrieve all Genres
        genres = new List<Genre>()
        {
            new Genre{
                Id = 1,
                Name = "Comedy"
            },
            new Genre{
                Id = 2,
                Name = "Action"
            },
            new Genre{
                Id = 3,
                Name = "Suspense"
            },
        };
        movies = MovieRepository.GetMovies();
    }

    private void SearchMovies()
    {
        Console.WriteLine("SearchMovies() called");
        Console.WriteLine($"selectedGenre: {selectedGenre}");
        Console.WriteLine($"title: {title}");
        Console.WriteLine($"upcomingReleases: {upcomingReleases}");
        Console.WriteLine($"inTheaters: {inTheaters}");

        movies = MovieRepository.GetMovies().Where(x => x.Title.ToLower().Contains(title.ToLower())).ToList();
    }
    
    private void Clear()
    {
        Console.WriteLine("Clear() called");
        movies = MovieRepository.GetMovies();

        title="";
        selectedGenre = "0";
        upcomingReleases = false;
        inTheaters = false;
    }
}

    